package Vista;

import Controller.EmpleadoControlador;
import Modelo.Empleado;
import Modelo.EmpleadoDAO;
import Modelo.Pedido;
import Modelo.Producto;
import java.awt.CardLayout;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;

/**
 * Esta clase representa la vista de un empleado en la aplicación. Permite a los empleados gestionar los pedidos
 * y ver los detalles de los mismos, así como registrar el tiempo transcurrido en su gestión mediante un temporizador.
 */
public class EmpleadoVista extends javax.swing.JFrame {

    private boolean pedidoSeleccionado;
    private EmpleadoControlador empleado;
    private DefaultTableModel modelo;
    private DefaultTableModel modeloProductos;
    private Empleado empleadoN;
    private Timer timer;
    private int tiempoTranscurrido;

    /**
     * Constructor de la clase EmpleadoVista.
     * Este constructor inicializa la vista para el empleado proporcionado, estableciendo la visibilidad de los
     * botones, los modelos de las tablas, y mostrando el nombre del empleado en la interfaz. También inicializa
     * el temporizador y carga los pedidos en la tabla.
     *
     * @param empleadoN Objeto de tipo Empleado que contiene la información del empleado actual.
     */
    public EmpleadoVista(Empleado empleadoN) {
        initComponents();
        this.empleadoN = empleadoN;
        this.empleado = new EmpleadoControlador(empleadoN);
        pedidoSeleccionado = false;
        btnDetalles.setVisible(false);
        btnDeseleccionar.setVisible(false);
        modelo = (DefaultTableModel) tblPedidos.getModel();
        modeloProductos = (DefaultTableModel) tblDetalles.getModel();
        TFUsuario.setText(empleadoN.getNombre());
        cargarTablaPedidos();

        tiempoTranscurrido = 0;
        timer = new Timer(1000, e -> actualizarTiempo());
    }

     /**
     * Método que actualiza el tiempo transcurrido en la interfaz.
     * Este método es llamado cada segundo por el temporizador y actualiza el campo de texto `txtTiempo`.
     */
    private void actualizarTiempo() {
        tiempoTranscurrido++;
        txtTiempo.setText(String.format("%d:%02d", tiempoTranscurrido / 60, tiempoTranscurrido % 60));
    }

    /**
     * Inicia el temporizador de tiempo transcurrido.
     * Este método comienza a contar el tiempo cuando el temporizador no está en ejecución.
     */
    private void iniciarTemporizador() {
        if (!timer.isRunning()) {
            timer.start();
        }
    }

    /**
     * Pausa el temporizador de tiempo transcurrido.
     * Este método detiene el temporizador si está en ejecución.
     */
    private void pausarTemporizador() {
        if (timer.isRunning()) {
            timer.stop();
        }
    }

    /**
     * Termina el temporizador y muestra un mensaje con el tiempo total transcurrido.
     * Este método detiene el temporizador y muestra un mensaje con el tiempo total registrado.
     */
    private void terminarTemporizador() {
        timer.stop();
        JOptionPane.showMessageDialog(this, "El tiempo total fue: "
                + String.format("%d:%02d", tiempoTranscurrido / 60, tiempoTranscurrido % 60));
        tiempoTranscurrido = 0;
        txtTiempo.setText("0:00");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        btnDetalles = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblPedidos = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        txtCantidadProductos = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        txtTiempo = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        btnDeseleccionar = new javax.swing.JButton();
        txtIdPedido = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        btnRegresar = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblDetalles = new javax.swing.JTable();
        txtNumeroPedido = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        TFUsuario = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(new java.awt.CardLayout());

        btnDetalles.setText("Ver detalles");
        btnDetalles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDetallesActionPerformed(evt);
            }
        });

        jLabel3.setText("Pedido seleccionado: ");

        tblPedidos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "id", "Productos", "Fecha de entrega"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblPedidos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblPedidosMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblPedidos);

        jLabel4.setText("Productos:");

        txtCantidadProductos.setText("0");

        jLabel1.setText("Tiempo:");

        txtTiempo.setText("0");

        jButton3.setText("Empezar pedido");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Pausar pedido");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Terminar pedido");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        btnDeseleccionar.setText("Deseleccionar pedido");
        btnDeseleccionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeseleccionarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnDetalles))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(48, 48, 48)
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(txtTiempo, javax.swing.GroupLayout.DEFAULT_SIZE, 83, Short.MAX_VALUE)
                                        .addComponent(txtCantidadProductos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(btnDeseleccionar)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(141, 141, 141)
                        .addComponent(txtIdPedido, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(157, 157, 157))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(txtCantidadProductos))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(txtTiempo))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton5)
                        .addGap(29, 29, 29)
                        .addComponent(txtIdPedido, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDetalles)
                    .addComponent(jLabel3)
                    .addComponent(btnDeseleccionar))
                .addGap(19, 19, 19))
        );

        jPanel1.add(jPanel2, "card2");

        btnRegresar.setText("Regresar");
        btnRegresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegresarActionPerformed(evt);
            }
        });

        jLabel5.setText("Detalles del pedido");

        tblDetalles.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Producto", "Descripción", "Cantidad"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblDetalles);

        txtNumeroPedido.setText("Estas viendo detalles del pedido ");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(254, 254, 254))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(btnRegresar, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(195, 195, 195)
                        .addComponent(txtNumeroPedido, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 567, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(416, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRegresar)
                    .addComponent(txtNumeroPedido))
                .addContainerGap())
        );

        jPanel1.add(jPanel3, "card3");

        jButton2.setText("Cerrar sesión");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel2.setText("Usuario: ");

        TFUsuario.setEditable(false);
        TFUsuario.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        TFUsuario.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        TFUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TFUsuarioActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 323, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(TFUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 8, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton2)
                            .addComponent(jLabel2)))
                    .addComponent(TFUsuario))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tblPedidosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblPedidosMouseClicked
        pedidoSeleccionado = true;
        btnDetalles.setVisible(true);
        btnDeseleccionar.setVisible(true);
        int filaSeleccionada = tblPedidos.getSelectedRow();

        if (filaSeleccionada != -1) {
            pedidoSeleccionado = true;
            btnDeseleccionar.setVisible(true);
            Object idPedido = tblPedidos.getValueAt(filaSeleccionada, 0);

            txtIdPedido.setText(String.valueOf(idPedido));

        }
    }//GEN-LAST:event_tblPedidosMouseClicked

    private void btnDeseleccionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeseleccionarActionPerformed
        pedidoSeleccionado = false;
        btnDetalles.setVisible(false);
        btnDeseleccionar.setVisible(false);
        txtCantidadProductos.setText("0");
        txtTiempo.setText("0");
    }//GEN-LAST:event_btnDeseleccionarActionPerformed

    private void btnRegresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegresarActionPerformed
        CardLayout cardLayout = (CardLayout) jPanel1.getLayout();
        cardLayout.show(jPanel1, "card2");


    }//GEN-LAST:event_btnRegresarActionPerformed

    private void btnDetallesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDetallesActionPerformed
        CardLayout cardLayout = (CardLayout) jPanel1.getLayout();
        cardLayout.show(jPanel1, "card3");
        Pedido pedidoSeleccionado = empleado.obtenerPedidoPorEmpleadoYId(empleadoN.getId(), Integer.valueOf(txtIdPedido.getText()));
        cargarTablaProductos(pedidoSeleccionado.getProductos());
    }//GEN-LAST:event_btnDetallesActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        LoginVista login = new LoginVista();
        login.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void TFUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TFUsuarioActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_TFUsuarioActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        iniciarTemporizador();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        pausarTemporizador();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        terminarTemporizador();

        int filaSeleccionada = tblPedidos.getSelectedRow(); // Obtener la fila seleccionada
        if (filaSeleccionada != -1) {
            // Obtener el ID del pedido seleccionado
            int idPedido = (int) tblPedidos.getValueAt(filaSeleccionada, 0);

            try {
                // Llamar al controlador para eliminar el pedido
                empleado.eliminarPedido(idPedido); // Eliminar el pedido a través del controlador

                // Actualizar la tabla de pedidos
                cargarTablaPedidos();

                // Reiniciar el contador de productos
                txtCantidadProductos.setText("0");
                JOptionPane.showMessageDialog(this, "El pedido ha sido eliminado automáticamente al finalizar el temporizador.");
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Error al eliminar el pedido: " + e.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(this, "No hay un pedido seleccionado para eliminar.");
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    /*private void cargarTablaPedidos() {
        List<Pedido> pedidos = empleado.obtenerPedidosPorEmpleado(empleadoN.getId());
        modelo.setRowCount(0); // Limpiar la tabla antes de cargar nuevos datos

        // Agregar filas a la tabla
        for (Pedido pedido : pedidos) {
            String productos = obtenerNombresProductos(pedido.getProductos());
            Object[] fila = {
                pedido.getId(),
                productos,
                pedido.getFechaEntrega()
            };
            modelo.addRow(fila);
        }
    }
     */
    
    /**
     * Carga los pedidos en la tabla de pedidos.
     * Este método obtiene la lista de pedidos del controlador y los agrega a la tabla `tblPedidos`.
     */
    private void cargarTablaPedidos() {
        List<Pedido> pedidos = empleado.obtenerPedidosPorEmpleado(empleadoN.getId());
        modelo.setRowCount(0); // Limpiar la tabla antes de cargar nuevos datos

        int totalProductos = 0; // Contador para el total de productos

        // Agregar filas a la tabla y contar productos
        for (Pedido pedido : pedidos) {
            String productos = obtenerNombresProductos(pedido.getProductos());

            // Sumar la cantidad de productos de este pedido al total
            totalProductos += pedido.getProductos().size();

            Object[] fila = {
                pedido.getId(),
                productos,
                pedido.getFechaEntrega()
            };
            modelo.addRow(fila);
        }

        // Actualizar el JLabel con el total de productos
        txtCantidadProductos.setText(String.valueOf(totalProductos));
    }

    private void cargarTablaProductos(List<Producto> productos) {

        modeloProductos.setRowCount(0); // Limpiar la tabla antes de cargar nuevos datos

        // Usar un Map para agrupar productos por nombre
        Map<String, int[]> contadorProductos = new HashMap<>();

        for (Producto producto : productos) {
            String nombre = producto.getNombre();
            String descripcion = producto.getDescripcion();

            // Si ya existe el producto en el Map, sumar la cantidad
            if (contadorProductos.containsKey(nombre)) {
                contadorProductos.get(nombre)[0] += 1; // Incrementar la cantidad
            } else {
                // Si no existe, agregarlo con cantidad inicial 1
                contadorProductos.put(nombre, new int[]{1, descripcion.hashCode()}); // hashCode para descripción
            }
        }

        // Agregar filas a la tabla con el total de productos agrupados
        for (Map.Entry<String, int[]> entry : contadorProductos.entrySet()) {
            String nombre = entry.getKey();
            int cantidad = entry.getValue()[0];
            String descripcion = productos.stream()
                    .filter(p -> p.getNombre().equals(nombre))
                    .findFirst()
                    .orElse(new Producto("", ""))
                    .getDescripcion();

            Object[] fila = {nombre, descripcion, cantidad}; // Agregar también la cantidad
            modeloProductos.addRow(fila);
        }
    }

    /**
     * Obtiene los nombres de los productos de un pedido.
     * Este método convierte una lista de productos en una cadena de texto separada por comas.
     *
     * @param productos Lista de productos en un pedido.
     * @return Cadena con los nombres de los productos en el pedido.
     */
    private String obtenerNombresProductos(List<Producto> productos) {
        StringBuilder nombresProductos = new StringBuilder();
        for (Producto producto : productos) {
            if (nombresProductos.length() > 0) {
                nombresProductos.append(", ");
            }
            nombresProductos.append(producto.getNombre());
        }
        System.out.println("Productos del pedido: " + nombresProductos.toString());
        return nombresProductos.toString();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField TFUsuario;
    private javax.swing.JButton btnDeseleccionar;
    private javax.swing.JButton btnDetalles;
    private javax.swing.JButton btnRegresar;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblDetalles;
    private javax.swing.JTable tblPedidos;
    private javax.swing.JLabel txtCantidadProductos;
    private javax.swing.JLabel txtIdPedido;
    private javax.swing.JLabel txtNumeroPedido;
    private javax.swing.JLabel txtTiempo;
    // End of variables declaration//GEN-END:variables
}
